geom_line(aes(y = media_m, color = "Média Móvel")) +
labs(x = "Observações", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "red") +
geom_point(aes(y = media_m), color = "black")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "black")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
# mudando os valores NA para n dar erro
media_m <- na.fill(media_m, 0)
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
library(tidyverse)
library(zoo)
#criando o vetorde dados
mortos <- c(25, 85, 65, 45, 95, 75, 15, 35)
#calculando a média móvel
media_m <- rollmean(mortos, k = 3, fill = NA)
print(media_m)
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = "Dias")) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
legend(legend = "Cores")
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
#Fazendo o gráfico
library(ggplot2)
#Criando um vetor para as observações
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes, mortos, media_m)
#adicionando uma coluna para as observações
df$observacoes <- 1:nrow(df)
#Grafico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red")
labs(x = "Dias", y = "Mortos") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
setwd("E:/Victor/Faculdade/Projeto Bioestatística em R 2023/teste_tutoriais")
setwd("E:/Victor/Faculdade/Projeto Bioestatística em R 2023/tutorial_1_v2")
hist(qtd_albumina,
main = "Qtd de albumina",
xlab = "Qtd de albumina g/100 mL", ylab = "Freq. Absoluta",
col = c("blue"),
border = c("royalblue"),
breaks = brk,
right = FALSE,
axes = FALSE
)
tabela <- data.frame(
Professores = c("João", "Luisa", "Ana", "Marcos"),
Altura_m = c(1.60, 1.55, 1.75, 1.70),
N_de_Pets = c(5, 1, 6, 0),
Dificuldade_da_Disciplina = c("Média", "Média", "Alta", "Baixa"),
Área_de_atuação = c("Zoologia", "Anatomia", "Botânica", "Educação")
)
tabela <- setNames(tabela,
c("Professores", "Altura(m)", "N° de pets",
"Dificuldade da Disciplina", "Área de atuação"))
library(kableExtra)
kable(head(tabela,10)) %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
var_integer <- 10
var_double <- 5.5
var_string <- "sou um texto"
class(var_integer) ; class(var_double) ; class(var_string)
library(dplyr)
dados <- read.csv2("Banco de Dados 2_csv8.csv")
View(dados)
glimpse(dados)
library(rmarkdown)
paged_table(dados)
table(dados$Genero)
table(dados$Nivel_de_Ensino)
table(dados$Genero, dados$Nivel_de_Ensino)
prop.table(table(dados$Genero))
prop.table(table(dados$Nivel_de_Ensino))
prop.table(table(dados$Genero, dados$Nivel_de_Ensino))
table(dados$N_Filhos)
prop.table(table(dados$N_Filhos))
range(dados$Salario)
nclass.Sturges(dados$Salario)
table(cut(dados$Salario, seq(0, 6, l = 7)))
library(rmarkdown)
qtd_albumina <- c(4.2, 4.2, 4.2, 4.3, 4.3, 4.5, 4.5, 4.5, 4.5, 4.8, 4.8, 4.8, 5.0, 5.0, 5.0, 5.0, 5.3, 5.3, 5.3, 5.5, 5.6, 5.6, 5.7, 5.8, 5.8)
sort(qtd_albumina) #ordena os dados
range(qtd_albumina) #descobre o menor e o maior número
amp_total <- ceiling(max(qtd_albumina)-min(qtd_albumina))
amp_total
k <- nclass.FD(qtd_albumina)
k
length(qtd_albumina)
k <- ceiling((sqrt(length(qtd_albumina))))
k
c <- amp_total / (k-1)
c
infclass <- min(qtd_albumina)
infclass
supclass <- infclass + (k*c)
supclass
brk <- seq(infclass,supclass,c)
brk
tabela_freq_albumina <- table(cut(qtd_albumina,breaks = brk, right = FALSE))
tabela_freq_albumina
tabela_freq_albumina <- prop.table(tabela_freq_albumina)
tabela_freq_albumina
setwd("E:/Victor/Faculdade/Projeto Bioestatística em R 2023/tutorial_1_v2")
mediana_a <- c(2, 2, 4, 5, 6, 7, 8)
mediana_b <- c(3, 3, 4, 5, 7, 8, 9, 9)
mediana_a <- data.frame( valores_a = 2, 2, 4, 5, 6, 7, 8)
mediana_b <- c(3, 3, 4, 5, 7, 8, 9, 9)
mediana_a <- c(2, 2, 4, 5, 6, 7, 8)
mediana_b <- c(3, 3, 4, 5, 7, 8, 9, 9)
median(mediana_a)
median(mediana_b)
library(rmarkdown)
qtd_albumina <- c(5.1, 5, 5.2, 4.5, 4.8, 4.9, 5, 5.2, 5.4, 5.1, 4.9, 5, 4.9, 5.1, 5.3, 5.1, 5.1, 5.3, 4.7, 5.3, 4.7, 5.4, 5, 5.5, 5)
sort(qtd_albumina) #ordena os dados
range(qtd_albumina) #descobre o menor e o maior número
amp_total <- ceiling(max(qtd_albumina)-min(qtd_albumina))
amp_total
k <- nclass.FD(qtd_albumina)
k
length(qtd_albumina)
k <- ceiling((sqrt(length(qtd_albumina))))
k
c <- amp_total / (k-1)
c
infclass <- min(qtd_albumina)
infclass
supclass <- infclass + (k*c)
supclass
brk <- seq(infclass,supclass,c)
brk
tabela_freq_albumina <- table(cut(qtd_albumina,breaks = brk, right = FALSE))
tabela_freq_albumina
tabela_freq_albumina <- prop.table(tabela_freq_albumina)
tabela_freq_albumina
hist(qtd_albumina,
main = "Qtd de albumina",
xlab = "Qtd de albumina g/100 mL", ylab = "Freq. Absoluta",
col = c("blue"),
border = c("royalblue"),
breaks = brk,
right = FALSE,
axes = FALSE
)
axis(1, at=seq(infclass,supclass,c))
axis(2, at=seq(0,max(tabela_freq_albumina),2))
doenca <- c(rep("leve", 30), rep("moderada", 15), rep("grave", 5))
freq_abs <- table(doenca)
freq_acum <- cumsum(freq_abs)
freq_perc <- round(prop.table(freq_abs) * 100, 2)
angulo <- round((freq_abs/sum(freq_abs)) * 360)
tabela_doenca <- data.frame(categorias = names(freq_abs),
frequencia_absoluta = as.numeric(freq_abs),
frequencia_acumulada = as.numeric(freq_acum),
porcentagem = freq_perc,
angulo = angulo)
tabela_doenca <- tabela_doenca[, c("categorias", "frequencia_absoluta", "frequencia_acumulada", "porcentagem.Freq", "angulo.Freq")]
tabela_doenca <- setNames(tabela_doenca,
c("Gravidade da Doenca", "Freq_Absoluta",
"Freq_Acumulada", "Porcentagem", "Angulação"))
library(kableExtra)
kable(tabela_doenca) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
row_spec(0, bold = TRUE) %>%
row_spec(1:nrow(tabela_doenca), align = "c")
qtd_albumina <- c(5.1, 5, 5.2, 4.5, 4.8, 4.9, 5, 5.2, 5.4, 5.1, 4.9, 5, 4.9, 5.1, 5.3, 5.1, 5.1, 5.3, 4.7, 5.3, 4.7, 5.4, 5, 5.5, 5)
sort(qtd_albumina) #ordena os dados
range(qtd_albumina) #descobre o menor e o maior número
amp_total <- ceiling(max(qtd_albumina)-min(qtd_albumina))
amp_total
k <- nclass.FD(qtd_albumina)
length(qtd_albumina)
k <- ceiling((sqrt(length(qtd_albumina))))
c <- amp_total / (k-1)
infclass <- min(qtd_albumina)
supclass <- infclass + (k*c)
brk <- seq(infclass,supclass,c)
tabela_freq_albumina_t <- table(cut(qtd_albumina,breaks = brk, right = FALSE))
tabela_freq_albumina <- prop.table(tabela_freq_albumina_t)
qtd_albumina <- c(5.1, 5, 5.2, 4.5, 4.8, 4.9, 5, 5.2, 5.4, 5.1, 4.9, 5, 4.9, 5.1, 5.3, 5.1, 5.1, 5.3, 4.7, 5.3, 4.7, 5.4, 5, 5.5, 5)
sort(qtd_albumina) #ordena os dados
range(qtd_albumina) #descobre o menor e o maior número
amp_total <- ceiling(max(qtd_albumina)-min(qtd_albumina))
amp_total
k <- nclass.FD(qtd_albumina)
length(qtd_albumina)
k <- ceiling((sqrt(length(qtd_albumina))))
c <- amp_total / (k-1)
infclass <- min(qtd_albumina)
supclass <- infclass + (k*c)
brk <- seq(infclass,supclass,c)
tabela_freq_albumina_t <- table(cut(qtd_albumina,breaks = brk, right = FALSE))
tabela_freq_albumina <- prop.table(tabela_freq_albumina_t)
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
freq_abs_acumulada <- cumsum(tabela_freq_albumina_t)
freq_abs_acumulada <- cumsum(tabela_freq_albumina_t)
freq_abs_acumulada
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina),)
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina), "Frequencia Abs Baixo" = as.vector(tabela_abs_acumulada))
freq_abs_acumulada <- cumsum(tabela_freq_albumina_t)
freq_abs_acumulada
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina), "Frequencia Abs Baixo" = as.vector(freq_abs_acumulada))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
freq_abs_acumulada <- cumsum(tabela_freq_albumina_t)
freq_abs_acumulada
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina), "Frequencia Abs Baixo" = as.vector(freq_abs_acumulada))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
# Tabela de frequências
tabela_freq_albumina_t <- table(cut(qtd_albumina, breaks = brk, right = FALSE))
# Identificar o intervalo que contém a mediana
intervalo_mediana <- which(tabela_freq_albumina_t == max(tabela_freq_albumina_t))
# Calcular o limite inferior do intervalo que contém a mediana (LiRmd)
LiRmd <- as.numeric(names(tabela_freq_albumina_t)[intervalo_mediana])
# Calcular a amplitude dos intervalos de classe (h)
h <- c[1]
# Obter o tamanho da amostra (n)
n <- sum(tabela_freq_albumina_t)
# Calcular a frequência absoluta acumulada para baixo no intervalo anterior que contém a mediana (Fant)
Fant <- sum(tabela_freq_albumina_t[1:(intervalo_mediana-1)])
# Obter a frequência absoluta simples no intervalo que contém a mediana (Fmd)
Fmd <- tabela_freq_albumina_t[intervalo_mediana]
# Calcular a mediana usando a fórmula
mediana <- LiRmd + h * ((n/2 - Fant)/Fmd)
mediana
intervalo_mediana <- which(tabela_freq_albumina_t == max(tabela_freq_albumina_t))
intervalo_mediana
# Encontrando olimite inferior do intervalo que contém a mediana (LiRmd)
liRmd <- as.numeric(names(tabela_freq_albumina_t)[intervalo_mediana])
liRmd
LiRmd
# Encontrando olimite inferior do intervalo que contém a mediana (LiRmd)
liRmd <- as.numeric(names(tabela_freq_albumina_t)[intervalo_mediana])
liRmd
# Encontrando a amplitude dos intervalos de classe (h)
h <- c[1]
h
# Obter o tamanho da amostra (n)
n <- sum(tabela_freq_albumina_t)
n
# Calcular a frequência absoluta acumulada para baixo no intervalo anterior que contém a mediana (Fant)
fant <- sum(tabela_freq_albumina_t[1:(intervalo_mediana-1)])
fant
# Obter a frequência absoluta simples no intervalo que contém a mediana (Fmd)
fmd <- tabela_freq_albumina_t[intervalo_mediana]
fmd
# Calcular Calculando a mediana
mediana <- liRmd + h * ((n/2 - fant)/fmd)
mediana
# Retomadno a tabela de frequéncias do exemplo
tabela_freq_albumina_t <- table(cut(qtd_albumina, breaks = brk, right = FALSE))
# identificando o intervalo que contém a mediana
intervalo_mediana <- which(tabela_freq_albumina_t == max(tabela_freq_albumina_t))
intervalo_mediana
